'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);var _assign = require('babel-runtime/core-js/object/assign');var _assign2 = _interopRequireDefault(_assign);var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);var _stringify = require('babel-runtime/core-js/json/stringify');var _stringify2 = _interopRequireDefault(_stringify);var _mapValues2 = require('lodash/fp/mapValues');var _mapValues3 = _interopRequireDefault(_mapValues2);var _toPairs2 = require('lodash/fp/toPairs');var _toPairs3 = _interopRequireDefault(_toPairs2);var _map3 = require('lodash/fp/map');var _map4 = _interopRequireDefault(_map3);var _join2 = require('lodash/fp/join');var _join3 = _interopRequireDefault(_join2);var _compose2 = require('lodash/fp/compose');var _compose3 = _interopRequireDefault(_compose2);var _isNil2 = require('lodash/fp/isNil');var _isNil3 = _interopRequireDefault(_isNil2);var _negate2 = require('lodash/fp/negate');var _negate3 = _interopRequireDefault(_negate2);var _pickBy2 = require('lodash/fp/pickBy');var _pickBy3 = _interopRequireDefault(_pickBy2);var _replace2 = require('lodash/replace');var _replace3 = _interopRequireDefault(_replace2);var _map5 = require('lodash/map');var _map6 = _interopRequireDefault(_map5);var _zipObject2 = require('lodash/zipObject');var _zipObject3 = _interopRequireDefault(_zipObject2);var _get2 = require('lodash/get');var _get3 = _interopRequireDefault(_get2);var _isPlainObject2 = require('lodash/isPlainObject');var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);var _has2 = require('lodash/has');var _has3 = _interopRequireDefault(_has2);var _identity2 = require('lodash/identity');var _identity3 = _interopRequireDefault(_identity2);var _defaults2 = require('lodash/defaults');var _defaults3 = _interopRequireDefault(_defaults2);var _toUpper2 = require('lodash/toUpper');var _toUpper3 = _interopRequireDefault(_toUpper2);var _isNumber2 = require('lodash/isNumber');var _isNumber3 = _interopRequireDefault(_isNumber2);var _isString2 = require('lodash/isString');var _isString3 = _interopRequireDefault(_isString2);var _isObject2 = require('lodash/isObject');var _isObject3 = _interopRequireDefault(_isObject2);

















































































/**
rocesses a "non-raw" response.
his will consume the response with the desired `responseFormat`.
hich is one of: text, json, buffer, blob etc. See node-fetch's
body class for more information.
param {Object} response The http response from fetch.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * @param {Object} options HTTP request options.
returns {Buffer|Object|String} The response in the desired format.
var consumeResponse = function () {var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(
  function _callee(response, _ref2) {var json = _ref2.json,_ref2$format = _ref2.format,format = _ref2$format === undefined ? 'text' : _ref2$format;var method, deserialize;return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            method = json ? 'json' : format;
            deserialize = json ? JSON.parse : _identity3.default;if (!

            (0, _has3.default)(response, method)) {_context.next = 10;break;}_context.t1 =
            deserialize;_context.next = 6;return response[method]();case 6:_context.t2 = _context.sent;_context.t0 = (0, _context.t1)(_context.t2);_context.next = 15;break;case 10:_context.t3 =
            deserialize;_context.next = 13;return response.text();case 13:_context.t4 = _context.sent;_context.t0 = (0, _context.t3)(_context.t4);case 15:return _context.abrupt('return', _context.t0);case 16:case 'end':return _context.stop();}}}, _callee, this);}));return function consumeResponse(_x, _x2) {return _ref3.apply(this, arguments);};}();


/**
                                                                                                                                                                                                                                                                                                                                                                * The default response error handler, if none was supplied by the user.
                                                                                                                                                                                                                                                                                                                                                                * @param {Object} request The HTTP request object.
                                                                                                                                                                                                                                                                                                                                                                * @param {Object} response The HTTP response object.
                                                                                                                                                                                                                                                                                                                                                                */var _chainable = require('@jasonpollman/chainable');var _chainable2 = _interopRequireDefault(_chainable);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // In the browser, this will work with various bundlers like webpack
// using the native browser `fetch` implementation or a polyfill, but
// you'll need to ignore the `node-fetch` library.
// eslint-disable-next-line global-require
var fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch'); /**
                                                                                   * Stringifies object only, leaves other values untouched.
                                                                                   * @param {Object|string} value The value to maybe stringify.
                                                                                   * @returns {string} The original string input value, or the stringified value.
                                                                                   */ /**
                                                                                       * A chainable fetch library.
                                                                                       * @since 5/9/18
                                                                                       * @file
                                                                                       */var maybeStringify = function maybeStringify(value) {return (0, _isObject3.default)(value) ? (0, _stringify2.default)(value) : value;}; /**
                                                                                                                                                                                                                                  * Use to omit non-string, non-numeric, and non-object values from querystrings.
                                                                                                                                                                                                                                  * @param {any} value The value to inspect.
                                                                                                                                                                                                                                  * @returns {boolean} True if the value is a valid querystring value, false otherwise.
                                                                                                                                                                                                                                  */var isOfQueryStringType = function isOfQueryStringType(value) {return (0, _isString3.default)(value) || (0, _isNumber3.default)(value) || (0, _isObject3.default)(value);}; /**
                                                                                                                                                                                                                                                                                                                                                                                                                 * Removes nil values from objects.
                                                                                                                                                                                                                                                                                                                                                                                                                 * @function
                                                                                                                                                                                                                                                                                                                                                                                                                 */var withoutNilValues = (0, _pickBy3.default)((0, _negate3.default)(_isNil3.default)); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Converts an object to a querystring.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * This differs from querystring.stringify in that it stringifies object values.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * @function
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */var querystringify = (0, _compose3.default)((0, _join3.default)('&'), (0, _map4.default)((0, _join3.default)('=')), _toPairs3.default, (0, _mapValues3.default)(encodeURIComponent), (0, _mapValues3.default)(maybeStringify), (0, _pickBy3.default)(isOfQueryStringType)); /**
he base headers applied to all requests if the `json` option is enabled.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * @type {Object<string>}
var JSONHeaders = { Accept: 'application/json', 'Content-Type': 'application/json' }; /**
ormats the HTTP request options by formatting the href to include the query string,
uppercasing the method, etc. You can pass additional options that node-fetch supports here
such as 'follow', 'timeout', etc.).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * @param {Object} options HTTP request options.
returns {Object} The formatted request options.
var formatRequestOptions = function formatRequestOptions(_ref) {var url = _ref.url,body = _ref.body,json = _ref.json,query = _ref.query,method = _ref.method,headers = _ref.headers,rest = (0, _objectWithoutProperties3.default)(_ref, ['url', 'body', 'json', 'query', 'method', 'headers']);return withoutNilValues((0, _extends3.default)({ method: (0, _toUpper3.default)(method), href: '' + url + (query ? '?' + querystringify(query) : ''), body: json ? (0, _stringify2.default)(body) : body, headers: json ? (0, _defaults3.default)({}, headers, JSONHeaders) : headers }, rest));};function handleResponseErrors(request, response, _ref4) {var url = _ref4.url;var status = response.status,statusText = response.statusText;throw (0, _assign2.default)(new Error('Request to ' + url + ' failed: ' + status + ' - ' + statusText), { request: request, response: response });} /**
reates a function that makes an HTTP request
using node-fetch and the provided method.
param {string} method The HTTP method this http request method is for.
returns {function} A http request function.
function initiateHttpRequest(method) {return function () {var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var options, interceptor, _interceptor, href, fetchOptions, response, responseInterceptor, handleResponseError;return _regenerator2.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if ((0, _isPlainObject3.default)(opts)) {_context2.next = 2;break;}throw new TypeError('Request options must be a plain object.');case 2:options = (0, _defaults3.default)({ url: this.toString(), method: method }, opts, this.requestOptions, { json: true }); // Pipe the options to the request interceptor, its return value will
              // be used in lieu of the given options. Here you can force headers, etc.
              interceptor = (0, _get3.default)(options, 'interceptors.request', _identity3.default);_interceptor = interceptor(formatRequestOptions(options)), href = _interceptor.href, fetchOptions = (0, _objectWithoutProperties3.default)(_interceptor, ['href']);_context2.next = 7;return fetch(href, fetchOptions);case 7:response = _context2.sent;if (!options.raw) {_context2.next = 10;break;}return _context2.abrupt('return', response);case 10:responseInterceptor = (0, _get3.default)(options, 'interceptors.response', _identity3.default);handleResponseError = (0, _get3.default)(options, 'handleResponseError', handleResponseErrors); // If the response is "ok" consume it and pipe it to the response interceptor.
              // If not, invoke the user's `handleResponseError` method.
              return _context2.abrupt('return', response.ok ? responseInterceptor(consumeResponse(response, options), options) : handleResponseError(request, response, options));case 13:case 'end':return _context2.stop();}}}, _callee2, this);}));function request() {return _ref5.apply(this, arguments);}return request;}();

}

/**
   * Creates a "base" chainable object for use with chainable-fetch.
   * @type {Object}
   */
var chainableFetch = function () {
  var methods = [
  'get',
  'put',
  'post',
  'delete',
  'option'];


  return (0, _chainable.chainableGeneratorWithDefaults)(
  (0, _assign2.default)((0, _zipObject3.default)(methods, (0, _map6.default)(methods, initiateHttpRequest)), {
    separator: '/',
    sanitizeLinks: encodeURIComponent,

    /**
                                        * A mechanism so users can use keywords like
                                        * `get` and `post` as path endpoints.
                                        * @param {string} endpoint The endpoint to push.
                                        * @returns {Proxy} The chainable child object.
                                        */
    path: function path(endpoint) {
      return (0, _chainable2.default)((0, _extends3.default)({},
      this, {
        tokens: [].concat((0, _toConsumableArray3.default)(this.tokens), [endpoint]) }));

    } }));


}();

/**
      * Creates a new chainable fetch api that will make requests to "options.host".
      * The given options will be merged with the defaults from above.
      * @function
      */exports.default =
function (options) {
  var requestOptions = (0, _isPlainObject3.default)(options) ? (0, _extends3.default)({}, options) : { host: options };

  // Not using url.parse for browser support.
  // @todo This could be a bit more comprehensive.
  var _ref6 = (0, _get3.default)(requestOptions, 'host', '').match(/(https?):\/\/(.*)/) || [],_ref7 = (0, _slicedToArray3.default)(_ref6, 3),protocol = _ref7[1],hostname = _ref7[2];

  if (!protocol || !hostname) {
    throw new TypeError(
    'Host must be a valid url with a protocol and hostname.');

  }

  return chainableFetch({
    prefix: (0, _replace3.default)(requestOptions.host, /\/$/, ''),
    requestOptions: requestOptions });

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
