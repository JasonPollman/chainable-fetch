'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.querystringify = exports.getSanitizedHostname = exports.withoutNilValues = exports.isOfQueryStringType = exports.maybeStringify = exports.tryJsonStringify = exports.tryJsonParse = exports.tryCatchReturn = undefined;var _stringify = require('babel-runtime/core-js/json/stringify');var _stringify2 = _interopRequireDefault(_stringify);var _mapValues2 = require('lodash/fp/mapValues');var _mapValues3 = _interopRequireDefault(_mapValues2);var _toPairs2 = require('lodash/fp/toPairs');var _toPairs3 = _interopRequireDefault(_toPairs2);var _map2 = require('lodash/fp/map');var _map3 = _interopRequireDefault(_map2);var _join2 = require('lodash/fp/join');var _join3 = _interopRequireDefault(_join2);var _identity2 = require('lodash/fp/identity');var _identity3 = _interopRequireDefault(_identity2);var _getOr2 = require('lodash/fp/getOr');var _getOr3 = _interopRequireDefault(_getOr2);var _trim2 = require('lodash/fp/trim');var _trim3 = _interopRequireDefault(_trim2);var _replace2 = require('lodash/fp/replace');var _replace3 = _interopRequireDefault(_replace2);var _compose2 = require('lodash/fp/compose');var _compose3 = _interopRequireDefault(_compose2);var _isNil2 = require('lodash/fp/isNil');var _isNil3 = _interopRequireDefault(_isNil2);var _negate2 = require('lodash/fp/negate');var _negate3 = _interopRequireDefault(_negate2);var _pickBy2 = require('lodash/fp/pickBy');var _pickBy3 = _interopRequireDefault(_pickBy2);var _isPlainObject2 = require('lodash/isPlainObject');var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);var _isArray2 = require('lodash/isArray');var _isArray3 = _interopRequireDefault(_isArray2);var _isNumber2 = require('lodash/isNumber');var _isNumber3 = _interopRequireDefault(_isNumber2);var _isObject2 = require('lodash/isObject');var _isObject3 = _interopRequireDefault(_isObject2);var _isString2 = require('lodash/isString');var _isString3 = _interopRequireDefault(_isString2);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}








/**
ttempts to invoke `method` with `args` and returns
`fallback` if an error is thrown.
param {function} method The method to try.
param {any} fallback The fallback value to return.
param {...nany} args The arguments to pass to `method`.

tility methods.
since 5/10/18
file
var tryCatchReturn = exports.tryCatchReturn = function tryCatchReturn(method, fallback) {for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {args[_key - 2] = arguments[_key];}try {return method.apply(undefined, args);} catch (e) {
    return fallback;
  }
};

/**
    * Attempt to execute JSON.parse on value. If JSON.parse fails, value is returned as given.
    * @param {any} value The value to attempt to parse.
    * @returns {any} The input value, or the parsed value.
    */
var tryJsonParse = exports.tryJsonParse = function tryJsonParse(value) {return (
    (0, _isString3.default)(value) && tryCatchReturn(JSON.parse, value, value) || value);};


/**
                                                                                             * Attempt to execute JSON.stringify on value. If JSON.stringify fails, value is returned as given.
                                                                                             * @param {any} value The value to attempt to stringify.
                                                                                             * @returns {any} The input value, or the stringified value.
                                                                                             */
var tryJsonStringify = exports.tryJsonStringify = function tryJsonStringify(value) {return tryCatchReturn(_stringify2.default, value, value);};

/**
                                                                                                                                                 * Stringifies objects only, leaves other values untouched.
                                                                                                                                                 * @param {Object|string} value The value to maybe stringify.
                                                                                                                                                 * @returns {string} The original string input value, or the stringified value.
                                                                                                                                                 */
var maybeStringify = exports.maybeStringify = function maybeStringify(value) {return (0, _isObject3.default)(value) ? (0, _stringify2.default)(value) : value;};

/**
                                                                                                                                                                  * Used to omit non-string, non-numeric, and non-object values from querystrings.
                                                                                                                                                                  * @param {any} value The value to inspect.
                                                                                                                                                                  * @returns {boolean} True if the value is a valid querystring value, false otherwise.
                                                                                                                                                                  */
var isOfQueryStringType = exports.isOfQueryStringType = function isOfQueryStringType(value) {return (0, _isString3.default)(value) ||
  (0, _isNumber3.default)(value) ||
  (0, _isArray3.default)(value) ||
  (0, _isPlainObject3.default)(value);};

/**
                                          * Removes nil values from objects.
                                          * @function
                                          */
var withoutNilValues = exports.withoutNilValues = (0, _pickBy3.default)((0, _negate3.default)(_isNil3.default));

/**
                                                                                                                  * Gets the hostname from an object and sanitizes it for use with [node-]fetch.
                                                                                                                  * @function
                                                                                                                  */
var getSanitizedHostname = exports.getSanitizedHostname = (0, _compose3.default)(
(0, _replace3.default)(/\/+$/, ''), _trim3.default,

(0, _getOr3.default)('', 'host'), _identity3.default);



/**
                                                        * Converts an object to a querystring.
                                                        * This differs from querystring.stringify in that it
                                                        * automatically JSON.stringify's object values.
                                                        * @function
                                                        */
var querystringify = exports.querystringify = (0, _compose3.default)(
function (querystring) {return querystring ? '?' + querystring : '';},
(0, _join3.default)('&'),
(0, _map3.default)((0, _join3.default)('=')), _toPairs3.default,

(0, _mapValues3.default)(encodeURIComponent),
(0, _mapValues3.default)(maybeStringify),
(0, _pickBy3.default)(isOfQueryStringType), _identity3.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJ0cnlDYXRjaFJldHVybiIsIm1ldGhvZCIsImZhbGxiYWNrIiwiYXJncyIsImUiLCJ0cnlKc29uUGFyc2UiLCJ2YWx1ZSIsIkpTT04iLCJwYXJzZSIsInRyeUpzb25TdHJpbmdpZnkiLCJtYXliZVN0cmluZ2lmeSIsImlzT2ZRdWVyeVN0cmluZ1R5cGUiLCJ3aXRob3V0TmlsVmFsdWVzIiwiZ2V0U2FuaXRpemVkSG9zdG5hbWUiLCJxdWVyeXN0cmluZ2lmeSIsInF1ZXJ5c3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFTQTs7Ozs7O2tqRUFUQTs7OztxakVBZ0JPLElBQU1BLDBDQUFpQixTQUFqQkEsY0FBaUIsQ0FBQ0MsTUFBRCxFQUFTQyxRQUFULEVBQStCLG1DQUFUQyxJQUFTLG1FQUFUQSxJQUFTLDhCQUMzRCxJQUFJLENBQ0YsT0FBT0Ysd0JBQVVFLElBQVYsQ0FBUCxDQUNELENBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixXQUFPRixRQUFQO0FBQ0Q7QUFDRixDQU5NOztBQVFQOzs7OztBQUtPLElBQU1HLHNDQUFlLFNBQWZBLFlBQWU7QUFDekIsNEJBQVdDLEtBQVgsS0FBcUJOLGVBQWVPLEtBQUtDLEtBQXBCLEVBQTJCRixLQUEzQixFQUFrQ0EsS0FBbEMsQ0FBdEIsSUFBbUVBLEtBRHpDLEdBQXJCOzs7QUFJUDs7Ozs7QUFLTyxJQUFNRyw4Q0FBbUIsU0FBbkJBLGdCQUFtQixnQkFBU1Qsb0NBQStCTSxLQUEvQixFQUFzQ0EsS0FBdEMsQ0FBVCxFQUF6Qjs7QUFFUDs7Ozs7QUFLTyxJQUFNSSwwQ0FBaUIsU0FBakJBLGNBQWlCLGdCQUFVLHdCQUFXSixLQUFYLElBQW9CLHlCQUFlQSxLQUFmLENBQXBCLEdBQTRDQSxLQUF0RCxFQUF2Qjs7QUFFUDs7Ozs7QUFLTyxJQUFNSyxvREFBc0IsU0FBdEJBLG1CQUFzQixnQkFBUyx3QkFBV0wsS0FBWDtBQUN2QywwQkFBV0EsS0FBWCxDQUR1QztBQUV2Qyx5QkFBVUEsS0FBVixDQUZ1QztBQUd2QywrQkFBZ0JBLEtBQWhCLENBSDhCLEVBQTVCOztBQUtQOzs7O0FBSU8sSUFBTU0sOENBQW1CLHNCQUFVLHNDQUFWLENBQXpCOztBQUVQOzs7O0FBSU8sSUFBTUMsc0RBQXVCO0FBQ2xDLHVCQUFXLE1BQVgsRUFBbUIsRUFBbkIsQ0FEa0M7O0FBR2xDLHFCQUFTLEVBQVQsRUFBYSxNQUFiLENBSGtDLHFCQUE3Qjs7OztBQU9QOzs7Ozs7QUFNTyxJQUFNQywwQ0FBaUI7QUFDNUIsK0JBQWdCQyxvQkFBa0JBLFdBQWxCLEdBQWtDLEVBQWxELEVBRDRCO0FBRTVCLG9CQUFRLEdBQVIsQ0FGNEI7QUFHNUIsbUJBQU8sb0JBQVEsR0FBUixDQUFQLENBSDRCOztBQUs1Qix5QkFBYUMsa0JBQWIsQ0FMNEI7QUFNNUIseUJBQWFOLGNBQWIsQ0FONEI7QUFPNUIsc0JBQVVDLG1CQUFWLENBUDRCLHFCQUF2QiIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXRpbGl0eSBtZXRob2RzLlxuICogQHNpbmNlIDUvMTAvMThcbiAqIEBmaWxlXG4gKi9cblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBmcCBmcm9tICdsb2Rhc2gvZnAnO1xuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGludm9rZSBgbWV0aG9kYCB3aXRoIGBhcmdzYCBhbmQgcmV0dXJuc1xuICogYGZhbGxiYWNrYCBpZiBhbiBlcnJvciBpcyB0aHJvd24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgVGhlIG1ldGhvZCB0byB0cnkuXG4gKiBAcGFyYW0ge2FueX0gZmFsbGJhY2sgVGhlIGZhbGxiYWNrIHZhbHVlIHRvIHJldHVybi5cbiAqIEBwYXJhbSB7Li4ubmFueX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gYG1ldGhvZGAuXG4gKi9cbmV4cG9ydCBjb25zdCB0cnlDYXRjaFJldHVybiA9IChtZXRob2QsIGZhbGxiYWNrLCAuLi5hcmdzKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG1ldGhvZCguLi5hcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxsYmFjaztcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRlbXB0IHRvIGV4ZWN1dGUgSlNPTi5wYXJzZSBvbiB2YWx1ZS4gSWYgSlNPTi5wYXJzZSBmYWlscywgdmFsdWUgaXMgcmV0dXJuZWQgYXMgZ2l2ZW4uXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIGF0dGVtcHQgdG8gcGFyc2UuXG4gKiBAcmV0dXJucyB7YW55fSBUaGUgaW5wdXQgdmFsdWUsIG9yIHRoZSBwYXJzZWQgdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCB0cnlKc29uUGFyc2UgPSB2YWx1ZSA9PiAoXG4gIChfLmlzU3RyaW5nKHZhbHVlKSAmJiB0cnlDYXRjaFJldHVybihKU09OLnBhcnNlLCB2YWx1ZSwgdmFsdWUpKSB8fCB2YWx1ZVxuKTtcblxuLyoqXG4gKiBBdHRlbXB0IHRvIGV4ZWN1dGUgSlNPTi5zdHJpbmdpZnkgb24gdmFsdWUuIElmIEpTT04uc3RyaW5naWZ5IGZhaWxzLCB2YWx1ZSBpcyByZXR1cm5lZCBhcyBnaXZlbi5cbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXR0ZW1wdCB0byBzdHJpbmdpZnkuXG4gKiBAcmV0dXJucyB7YW55fSBUaGUgaW5wdXQgdmFsdWUsIG9yIHRoZSBzdHJpbmdpZmllZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRyeUpzb25TdHJpbmdpZnkgPSB2YWx1ZSA9PiB0cnlDYXRjaFJldHVybihKU09OLnN0cmluZ2lmeSwgdmFsdWUsIHZhbHVlKTtcblxuLyoqXG4gKiBTdHJpbmdpZmllcyBvYmplY3RzIG9ubHksIGxlYXZlcyBvdGhlciB2YWx1ZXMgdW50b3VjaGVkLlxuICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gbWF5YmUgc3RyaW5naWZ5LlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIG9yaWdpbmFsIHN0cmluZyBpbnB1dCB2YWx1ZSwgb3IgdGhlIHN0cmluZ2lmaWVkIHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgbWF5YmVTdHJpbmdpZnkgPSB2YWx1ZSA9PiAoXy5pc09iamVjdCh2YWx1ZSkgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZSk7XG5cbi8qKlxuICogVXNlZCB0byBvbWl0IG5vbi1zdHJpbmcsIG5vbi1udW1lcmljLCBhbmQgbm9uLW9iamVjdCB2YWx1ZXMgZnJvbSBxdWVyeXN0cmluZ3MuXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYSB2YWxpZCBxdWVyeXN0cmluZyB2YWx1ZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgY29uc3QgaXNPZlF1ZXJ5U3RyaW5nVHlwZSA9IHZhbHVlID0+IF8uaXNTdHJpbmcodmFsdWUpXG4gIHx8IF8uaXNOdW1iZXIodmFsdWUpXG4gIHx8IF8uaXNBcnJheSh2YWx1ZSlcbiAgfHwgXy5pc1BsYWluT2JqZWN0KHZhbHVlKTtcblxuLyoqXG4gKiBSZW1vdmVzIG5pbCB2YWx1ZXMgZnJvbSBvYmplY3RzLlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRob3V0TmlsVmFsdWVzID0gZnAucGlja0J5KGZwLm5lZ2F0ZShmcC5pc05pbCkpO1xuXG4vKipcbiAqIEdldHMgdGhlIGhvc3RuYW1lIGZyb20gYW4gb2JqZWN0IGFuZCBzYW5pdGl6ZXMgaXQgZm9yIHVzZSB3aXRoIFtub2RlLV1mZXRjaC5cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZ2V0U2FuaXRpemVkSG9zdG5hbWUgPSBmcC5jb21wb3NlKFxuICBmcC5yZXBsYWNlKC9cXC8rJC8sICcnKSxcbiAgZnAudHJpbSxcbiAgZnAuZ2V0T3IoJycsICdob3N0JyksXG4gIGZwLmlkZW50aXR5LFxuKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBvYmplY3QgdG8gYSBxdWVyeXN0cmluZy5cbiAqIFRoaXMgZGlmZmVycyBmcm9tIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSBpbiB0aGF0IGl0XG4gKiBhdXRvbWF0aWNhbGx5IEpTT04uc3RyaW5naWZ5J3Mgb2JqZWN0IHZhbHVlcy5cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgcXVlcnlzdHJpbmdpZnkgPSBmcC5jb21wb3NlKFxuICBxdWVyeXN0cmluZyA9PiAocXVlcnlzdHJpbmcgPyBgPyR7cXVlcnlzdHJpbmd9YCA6ICcnKSxcbiAgZnAuam9pbignJicpLFxuICBmcC5tYXAoZnAuam9pbignPScpKSxcbiAgZnAudG9QYWlycyxcbiAgZnAubWFwVmFsdWVzKGVuY29kZVVSSUNvbXBvbmVudCksXG4gIGZwLm1hcFZhbHVlcyhtYXliZVN0cmluZ2lmeSksXG4gIGZwLnBpY2tCeShpc09mUXVlcnlTdHJpbmdUeXBlKSxcbiAgZnAuaWRlbnRpdHksXG4pO1xuIl19